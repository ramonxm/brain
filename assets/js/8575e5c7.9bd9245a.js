"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[2062],{2529:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"conceptsSidebar":[{"type":"link","label":"\ud83d\udca1 Conceitos Fundamentais","href":"/brain/docs/concepts/","docId":"concepts/index","unlisted":false},{"type":"link","label":"\ud83d\udcda Nota\xe7\xe3o Big O","href":"/brain/docs/concepts/big-o-notation","docId":"concepts/big-o-notation","unlisted":false},{"type":"link","label":"\ud83d\udce5 FIFO (First In, First Out)","href":"/brain/docs/concepts/fifo","docId":"concepts/fifo","unlisted":false},{"type":"link","label":"\ud83d\udce4 LIFO (Last In, First Out)","href":"/brain/docs/concepts/lifo","docId":"concepts/lifo","unlisted":false},{"type":"link","label":"\ud83e\udde0 Mem\xf3ria Heap e Stack","href":"/brain/docs/concepts/memory-stack-heap","docId":"concepts/memory-stack-heap","unlisted":false},{"type":"link","label":"\ud83d\udd04 Swap","href":"/brain/docs/concepts/swap","docId":"concepts/swap","unlisted":false},{"type":"link","label":"\ud83e\uddf5 Threads","href":"/brain/docs/concepts/thread","docId":"concepts/thread","unlisted":false}],"dataStructuresSidebar":[{"type":"link","label":"\ud83d\udce6 Array","href":"/brain/docs/data-structures/array","docId":"data-structures/array","unlisted":false},{"type":"link","label":"\ud83d\udcda Stack","href":"/brain/docs/data-structures/stack","docId":"data-structures/stack","unlisted":false},{"type":"link","label":"\ud83d\udcda Queue","href":"/brain/docs/data-structures/queue","docId":"data-structures/queue","unlisted":false},{"type":"link","label":"\ud83c\udf33 Binary Tree","href":"/brain/docs/data-structures/binary-tree","docId":"data-structures/binary-tree","unlisted":false},{"type":"link","label":"\ud83d\udd17 Linked List","href":"/brain/docs/data-structures/linked-list","docId":"data-structures/linked-list","unlisted":false}],"algorithmsSidebar":[{"type":"link","label":"\ud83d\udd04 Bubble Sort","href":"/brain/docs/algorithms/sorting/bubble-sort","docId":"algorithms/sorting/bubble-sort","unlisted":false},{"type":"link","label":"Merge Sort","href":"/brain/docs/algorithms/sorting/merge-sort","docId":"algorithms/sorting/merge-sort","unlisted":false},{"type":"link","label":"Quick Sort","href":"/brain/docs/algorithms/sorting/quick-sort","docId":"algorithms/sorting/quick-sort","unlisted":false},{"type":"link","label":"Binary Search (Busca Bin\xe1ria)","href":"/brain/docs/algorithms/sorting/binary-search","docId":"algorithms/sorting/binary-search","unlisted":false},{"type":"category","label":"Contests","items":[{"type":"link","label":"Two Sum","href":"/brain/docs/algorithms/contests/leetcode/two-sum","docId":"algorithms/contests/leetcode/two-sum","unlisted":false},{"type":"link","label":"Single Number","href":"/brain/docs/algorithms/contests/leetcode/single-number","docId":"algorithms/contests/leetcode/single-number","unlisted":false},{"type":"link","label":"Sort List","href":"/brain/docs/algorithms/contests/leetcode/sort-list","docId":"algorithms/contests/leetcode/sort-list","unlisted":false},{"type":"link","label":"Roman to Integer","href":"/brain/docs/algorithms/contests/leetcode/roman-to-integer","docId":"algorithms/contests/leetcode/roman-to-integer","unlisted":false},{"type":"link","label":"AtCoder Beginner Contest 156","href":"/brain/docs/algorithms/contests/atcoder/abc156","docId":"algorithms/contests/atcoder/abc156","unlisted":false},{"type":"link","label":"AtCoder Beginner Contest 158","href":"/brain/docs/algorithms/contests/atcoder/abc158","docId":"algorithms/contests/atcoder/abc158","unlisted":false},{"type":"link","label":"AtCoder Beginner Contest 175","href":"/brain/docs/algorithms/contests/atcoder/abc175","docId":"algorithms/contests/atcoder/abc175","unlisted":false}],"collapsed":true,"collapsible":true}],"topicsSidebar":[{"type":"category","label":"AWS","items":[{"type":"link","label":"AWS (Amazon Web Services)","href":"/brain/docs/topics/aws/","docId":"topics/aws/index","unlisted":false},{"type":"link","label":"Regi\xf5es e AZs","href":"/brain/docs/topics/aws/regions","docId":"topics/aws/regions","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"algorithms/contests/atcoder/abc156":{"id":"algorithms/contests/atcoder/abc156","title":"AtCoder Beginner Contest 156","description":"Problema A - Beginner","sidebar":"algorithmsSidebar"},"algorithms/contests/atcoder/abc158":{"id":"algorithms/contests/atcoder/abc158","title":"AtCoder Beginner Contest 158","description":"Problema A - Station and Bus","sidebar":"algorithmsSidebar"},"algorithms/contests/atcoder/abc175":{"id":"algorithms/contests/atcoder/abc175","title":"AtCoder Beginner Contest 175","description":"Problema A - Rainy Season","sidebar":"algorithmsSidebar"},"algorithms/contests/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal":{"id":"algorithms/contests/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal","title":"Construct Binary Tree from Preorder and Inorder Traversal","description":"Descri\xe7\xe3o"},"algorithms/contests/leetcode/roman-to-integer":{"id":"algorithms/contests/leetcode/roman-to-integer","title":"Roman to Integer","description":"Problema","sidebar":"algorithmsSidebar"},"algorithms/contests/leetcode/single-number":{"id":"algorithms/contests/leetcode/single-number","title":"Single Number","description":"Problema","sidebar":"algorithmsSidebar"},"algorithms/contests/leetcode/sort-list":{"id":"algorithms/contests/leetcode/sort-list","title":"Sort List","description":"Problema","sidebar":"algorithmsSidebar"},"algorithms/contests/leetcode/two-sum":{"id":"algorithms/contests/leetcode/two-sum","title":"Two Sum","description":"Problema","sidebar":"algorithmsSidebar"},"algorithms/graph/breadth-first-search":{"id":"algorithms/graph/breadth-first-search","title":"\ud83d\udd78\ufe0f Breadth-First Search (BFS)","description":"Introduction"},"algorithms/greedy/greedy-index":{"id":"algorithms/greedy/greedy-index","title":"Algoritmos Gulosos","description":"Este \xe9 um documento placeholder para resolver links quebrados para /docs/algorithms/greedy/index."},"algorithms/greedy/README":{"id":"algorithms/greedy/README","title":"README","description":"Este diret\xf3rio cont\xe9m os materiais sobre algoritmos gulosos. Consulte o arquivo index.md para o conte\xfado principal."},"algorithms/search/binary-search":{"id":"algorithms/search/binary-search","title":"\ud83d\udd0d Binary Search","description":"Introduction"},"algorithms/sorting/binary-search":{"id":"algorithms/sorting/binary-search","title":"Binary Search (Busca Bin\xe1ria)","description":"A Busca Bin\xe1ria \xe9 um algoritmo eficiente para encontrar um elemento em um array ordenado. O algoritmo divide repetidamente o array pela metade, reduzindo o espa\xe7o de busca em cada itera\xe7\xe3o.","sidebar":"algorithmsSidebar"},"algorithms/sorting/bubble-sort":{"id":"algorithms/sorting/bubble-sort","title":"\ud83d\udd04 Bubble Sort","description":"Introduction","sidebar":"algorithmsSidebar"},"algorithms/sorting/merge-sort":{"id":"algorithms/sorting/merge-sort","title":"Merge Sort","description":"O Merge Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a t\xe9cnica de dividir e conquistar. Ele divide o array em duas metades, ordena cada metade recursivamente e depois combina as duas metades ordenadas.","sidebar":"algorithmsSidebar"},"algorithms/sorting/quick-sort":{"id":"algorithms/sorting/quick-sort","title":"Quick Sort","description":"O Quick Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a estrat\xe9gia de dividir e conquistar. Ele escolhe um elemento como piv\xf4 e particiona o array ao redor do piv\xf4, colocando elementos menores \xe0 esquerda e maiores \xe0 direita.","sidebar":"algorithmsSidebar"},"algorithms/sorting/selection-sort":{"id":"algorithms/sorting/selection-sort","title":"\ud83d\udd04 Selection Sort","description":"Introduction"},"concepts/big-o-notation":{"id":"concepts/big-o-notation","title":"\ud83d\udcda Nota\xe7\xe3o Big O","description":"Introdu\xe7\xe3o","sidebar":"conceptsSidebar"},"concepts/fifo":{"id":"concepts/fifo","title":"\ud83d\udce5 FIFO (First In, First Out)","description":"FIFO, que significa \\"Primeiro a Entrar, Primeiro a Sair\\" (First In, First Out), \xe9 um m\xe9todo comumente usado em programa\xe7\xe3o de computadores e estruturas de dados. Refere-se a um tipo de estrutura de dados ou processamento onde o primeiro elemento adicionado a uma cole\xe7\xe3o \xe9 o primeiro a ser removido. Este princ\xedpio \xe9 semelhante a uma fila no mundo real, como pessoas esperando em uma fila de supermercado. A pessoa que chega primeiro \xe9 a primeira a ser atendida.","sidebar":"conceptsSidebar"},"concepts/index":{"id":"concepts/index","title":"\ud83d\udca1 Conceitos Fundamentais","description":"Bem-vindo \xe0 se\xe7\xe3o de conceitos fundamentais! Aqui voc\xea aprender\xe1 sobre os princ\xedpios centrais que fundamentam a ci\xeancia da computa\xe7\xe3o e a programa\xe7\xe3o.","sidebar":"conceptsSidebar"},"concepts/lifo":{"id":"concepts/lifo","title":"\ud83d\udce4 LIFO (Last In, First Out)","description":"LIFO, ou \\"\xdaltimo a Entrar, Primeiro a Sair\\" (Last In, First Out), \xe9 um m\xe9todo de organiza\xe7\xe3o de dados onde o \xfaltimo elemento adicionado \xe9 o primeiro a ser removido. Este conceito \xe9 comumente aplicado em estruturas de dados como pilhas.","sidebar":"conceptsSidebar"},"concepts/memory-stack-heap":{"id":"concepts/memory-stack-heap","title":"\ud83e\udde0 Mem\xf3ria Heap e Stack","description":"Quando um programa \xe9 executado, a mem\xf3ria \xe9 alocada para armazenar vari\xe1veis e dados tempor\xe1rios. Duas \xe1reas principais de mem\xf3ria s\xe3o comumente utilizadas: heap e stack.","sidebar":"conceptsSidebar"},"concepts/swap":{"id":"concepts/swap","title":"\ud83d\udd04 Swap","description":"\\"Swap\\" \xe9 um termo comum usado em programa\xe7\xe3o e ci\xeancia da computa\xe7\xe3o, referindo-se \xe0 troca ou interc\xe2mbio de valores entre duas vari\xe1veis. Esta opera\xe7\xe3o envolve a troca do conte\xfado de duas vari\xe1veis, efetivamente trocando seus valores.","sidebar":"conceptsSidebar"},"concepts/thread":{"id":"concepts/thread","title":"\ud83e\uddf5 Threads","description":"Uma thread \xe9 a menor unidade de execu\xe7\xe3o em um sistema operacional. Em um programa, uma thread \xe9 uma sequ\xeancia de instru\xe7\xf5es que pode ser executada independentemente. Os sistemas operacionais modernos suportam a execu\xe7\xe3o simult\xe2nea de m\xfaltiplas threads, permitindo que os processos realizem tarefas concorrentemente. As threads compartilham o mesmo espa\xe7o de endere\xe7o, facilitando a comunica\xe7\xe3o entre elas. No entanto, isso pode levar a problemas de sincroniza\xe7\xe3o, como condi\xe7\xf5es de corrida (race conditions).","sidebar":"conceptsSidebar"},"data-structures/array":{"id":"data-structures/array","title":"\ud83d\udce6 Array","description":"Introduction","sidebar":"dataStructuresSidebar"},"data-structures/binary-tree":{"id":"data-structures/binary-tree","title":"\ud83c\udf33 Binary Tree","description":"Introduction","sidebar":"dataStructuresSidebar"},"data-structures/linked-list":{"id":"data-structures/linked-list","title":"\ud83d\udd17 Linked List","description":"Introduction","sidebar":"dataStructuresSidebar"},"data-structures/queue":{"id":"data-structures/queue","title":"\ud83d\udcda Queue","description":"Introduction","sidebar":"dataStructuresSidebar"},"data-structures/stack":{"id":"data-structures/stack","title":"\ud83d\udcda Stack","description":"Introduction","sidebar":"dataStructuresSidebar"},"topics/aws/index":{"id":"topics/aws/index","title":"AWS (Amazon Web Services)","description":"Amazon Web Services foi lan\xe7ada em 2006, \xe9 pioneira em Cloud Computing.","sidebar":"topicsSidebar"},"topics/aws/regions":{"id":"topics/aws/regions","title":"Regi\xf5es e AZs","description":"O que s\xe3o Regi\xf5es na AWS?","sidebar":"topicsSidebar"}}}}')}}]);