"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[5378],{987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"algorithms/graph/breadth-first-search","title":"\ud83d\udd78\ufe0f Breadth-First Search (BFS)","description":"Introduction","source":"@site/docs/algorithms/graph/breadth-first-search.md","sourceDirName":"algorithms/graph","slug":"/algorithms/graph/breadth-first-search","permalink":"/brain/docs/algorithms/graph/breadth-first-search","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/graph/breadth-first-search.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749776206000,"frontMatter":{}}');var i=t(4848),s=t(8453);const l={},o="\ud83d\udd78\ufe0f Breadth-First Search (BFS)",h={},a=[{value:"Introduction",id:"introduction",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation (Python)",id:"implementation-python",level:2},{value:"Applications",id:"applications",level:2},{value:"Complexity",id:"complexity",level:2},{value:"When to Use BFS",id:"when-to-use-bfs",level:2},{value:"Related Algorithms",id:"related-algorithms",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ufe0f-breadth-first-search-bfs",children:"\ud83d\udd78\ufe0f Breadth-First Search (BFS)"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Breadth-First Search (BFS)"})," is a graph traversal algorithm that explores all the neighbors of a node before moving to the next level. It is commonly used to find the shortest path in unweighted graphs."]}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Start from the source node and enqueue it"}),"\n",(0,i.jsx)(n.li,{children:"Mark the source as visited"}),"\n",(0,i.jsxs)(n.li,{children:["While the queue is not empty:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dequeue a node"}),"\n",(0,i.jsx)(n.li,{children:"Visit all its unvisited neighbors and enqueue them"}),"\n",(0,i.jsx)(n.li,{children:"Mark neighbors as visited"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-python",children:"Implementation (Python)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n    while queue:\n        node = queue.popleft()\n        print(node, end=\" \")\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\n# Example usage\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\nbfs(graph, 'A')  # Output: A B C D E F\n"})}),"\n",(0,i.jsx)(n.h2,{id:"applications",children:"Applications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Finding the shortest path in unweighted graphs"}),"\n",(0,i.jsx)(n.li,{children:"Web crawlers"}),"\n",(0,i.jsx)(n.li,{children:"Social network analysis"}),"\n",(0,i.jsx)(n.li,{children:"Broadcasting in networks"}),"\n",(0,i.jsx)(n.li,{children:"Solving puzzles (like Rubik's Cube, word ladder)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time"}),": O(V + E), where V is the number of vertices and E is the number of edges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space"}),": O(V)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-bfs",children:"When to Use BFS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When you need the shortest path in an unweighted graph"}),"\n",(0,i.jsx)(n.li,{children:"When you want to explore all nodes at the current depth before going deeper"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-algorithms",children:"Related Algorithms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Depth-First Search (DFS)"}),": Explores as far as possible along each branch before backtracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dijkstra's Algorithm"}),": Finds the shortest path in weighted graphs"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);