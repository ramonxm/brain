"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[4037],{5862:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"concepts/lifo","title":"LIFO (Last In, First Out)","description":"LIFO, ou \\"\xdaltimo a Entrar, Primeiro a Sair\\" (Last In, First Out), \xe9 um m\xe9todo de organiza\xe7\xe3o de dados onde o \xfaltimo elemento adicionado \xe9 o primeiro a ser removido. Este conceito \xe9 comumente aplicado em estruturas de dados como pilhas.","source":"@site/docs/concepts/lifo.md","sourceDirName":"concepts","slug":"/concepts/lifo","permalink":"/brain/docs/concepts/lifo","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/lifo.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1750116678000,"frontMatter":{},"sidebar":"conceptsSidebar","previous":{"title":"FIFO (First In, First Out)","permalink":"/brain/docs/concepts/fifo"}}');var s=n(4848),a=n(8453);const i={},r="LIFO (Last In, First Out)",d={},l=[{value:"Pilhas",id:"pilhas",level:2},{value:"Opera\xe7\xe3o LIFO em Pilhas",id:"opera\xe7\xe3o-lifo-em-pilhas",level:3},{value:"Exemplo de C\xf3digo em Python",id:"exemplo-de-c\xf3digo-em-python",level:3}];function c(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"lifo-last-in-first-out",children:"LIFO (Last In, First Out)"})}),"\n",(0,s.jsx)(o.p,{children:'LIFO, ou "\xdaltimo a Entrar, Primeiro a Sair" (Last In, First Out), \xe9 um m\xe9todo de organiza\xe7\xe3o de dados onde o \xfaltimo elemento adicionado \xe9 o primeiro a ser removido. Este conceito \xe9 comumente aplicado em estruturas de dados como pilhas.'}),"\n",(0,s.jsx)(o.h2,{id:"pilhas",children:"Pilhas"}),"\n",(0,s.jsx)(o.p,{children:"Uma pilha \xe9 uma cole\xe7\xe3o de elementos onde as opera\xe7\xf5es de inser\xe7\xe3o e remo\xe7\xe3o ocorrem apenas em uma extremidade, conhecida como topo. Quando um elemento \xe9 adicionado \xe0 pilha, ele se torna o novo topo, e quando um elemento \xe9 removido, \xe9 sempre o elemento do topo que \xe9 retirado."}),"\n",(0,s.jsx)(o.h3,{id:"opera\xe7\xe3o-lifo-em-pilhas",children:"Opera\xe7\xe3o LIFO em Pilhas"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Inser\xe7\xe3o (Push):"})," Novos elementos s\xe3o adicionados ao topo da pilha."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Remo\xe7\xe3o (Pop):"})," A remo\xe7\xe3o tamb\xe9m acontece no topo, retirando o elemento mais recentemente adicionado."]}),"\n"]}),"\n",(0,s.jsx)(o.h3,{id:"exemplo-de-c\xf3digo-em-python",children:"Exemplo de C\xf3digo em Python"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n# Usando a Pilha\nstack_example = Stack()\nstack_example.push(1)\nstack_example.push(2)\nstack_example.push(3)\n\nprint(stack_example.pop())  # Sa\xedda: 3\nprint(stack_example.pop())  # Sa\xedda: 2\n"})})]})}function m(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>r});var t=n(6540);const s={},a=t.createContext(s);function i(e){const o=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:o},e.children)}}}]);