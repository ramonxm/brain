"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[4388],{1118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>u,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"data-structures/queue/index","title":"\ud83d\udcda Queue","description":"Introduction","source":"@site/docs/data-structures/queue/index.md","sourceDirName":"data-structures/queue","slug":"/data-structures/queue/","permalink":"/brain/docs/data-structures/queue/","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/queue/index.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748952502000,"frontMatter":{},"sidebar":"dataStructuresSidebar","previous":{"title":"\ud83d\udcda Stack","permalink":"/brain/docs/data-structures/stack/"},"next":{"title":"\ud83c\udf33 Binary Tree","permalink":"/brain/docs/data-structures/binary-tree/"}}');var s=t(4848),i=t(8453);const u={},l="\ud83d\udcda Queue",a={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Key Operations",id:"key-operations",level:2},{value:"Example (Python)",id:"example-python",level:2},{value:"Applications",id:"applications",level:2},{value:"When to Use a Queue",id:"when-to-use-a-queue",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Data Structures",id:"related-data-structures",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-queue",children:"\ud83d\udcda Queue"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"queue"})," is a linear data structure that follows the First-In, First-Out (FIFO) principle. The first element added is the first one to be removed."]}),"\n",(0,s.jsx)(n.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enqueue"}),": Add an element to the end of the queue (O(1))"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dequeue"}),": Remove the element from the front of the queue (O(1))"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Peek/Front"}),": View the front element without removing it (O(1))"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IsEmpty"}),": Check if the queue is empty"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-python",children:"Example (Python)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import deque\n\nqueue = deque()\n\n# Enqueue elements\nqueue.append(10)\nqueue.append(20)\nqueue.append(30)\n\n# Peek at the front\nprint(queue[0])  # Output: 10\n\n# Dequeue elements\nprint(queue.popleft())  # Output: 10\nprint(queue.popleft())  # Output: 20\n\n# Check if empty\nif not queue:\n    print("Queue is empty!")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"applications",children:"Applications"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Task scheduling (print queue, CPU scheduling)"}),"\n",(0,s.jsx)(n.li,{children:"Breadth-first search (BFS) in graphs"}),"\n",(0,s.jsx)(n.li,{children:"Handling requests in web servers"}),"\n",(0,s.jsx)(n.li,{children:"Buffer management"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-a-queue",children:"When to Use a Queue"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you need to process items in the order they arrive"}),"\n",(0,s.jsx)(n.li,{children:"When implementing algorithms like BFS"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only the front and rear elements are accessible"}),"\n",(0,s.jsx)(n.li,{children:"Not suitable for random access"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-data-structures",children:"Related Data Structures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stack"}),": Follows Last-In, First-Out (LIFO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deque"}),": Double-ended queue, allows insertion/removal from both ends"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function u(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);