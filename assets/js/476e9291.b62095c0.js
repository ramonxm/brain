"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[7108],{1816:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/fifo","title":"FIFO (First In, First Out)","description":"FIFO, que significa \\"Primeiro a Entrar, Primeiro a Sair\\" (First In, First Out), \xe9 um m\xe9todo comumente usado em programa\xe7\xe3o de computadores e estruturas de dados. Refere-se a um tipo de estrutura de dados ou processamento onde o primeiro elemento adicionado a uma cole\xe7\xe3o \xe9 o primeiro a ser removido. Este princ\xedpio \xe9 semelhante a uma fila no mundo real, como pessoas esperando em uma fila de supermercado. A pessoa que chega primeiro \xe9 a primeira a ser atendida.","source":"@site/docs/concepts/fifo.md","sourceDirName":"concepts","slug":"/concepts/fifo","permalink":"/brain/docs/concepts/fifo","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/fifo.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1750117941000,"frontMatter":{},"sidebar":"conceptsSidebar","previous":{"title":"Swap","permalink":"/brain/docs/concepts/swap"},"next":{"title":"LIFO (Last In, First Out)","permalink":"/brain/docs/concepts/lifo"}}');var r=o(4848),t=o(8453);const a={},i="FIFO (First In, First Out)",u={},d=[];function m(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fifo-first-in-first-out",children:"FIFO (First In, First Out)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"FIFO"}),', que significa "Primeiro a Entrar, Primeiro a Sair" (First In, First Out), \xe9 um m\xe9todo comumente usado em programa\xe7\xe3o de computadores e estruturas de dados. Refere-se a um tipo de estrutura de dados ou processamento onde o primeiro elemento adicionado a uma cole\xe7\xe3o \xe9 o primeiro a ser removido. Este princ\xedpio \xe9 semelhante a uma fila no mundo real, como pessoas esperando em uma fila de supermercado. A pessoa que chega primeiro \xe9 a primeira a ser atendida.']}),"\n",(0,r.jsx)(n.p,{children:"Na programa\xe7\xe3o, FIFO \xe9 frequentemente implementado usando uma estrutura de dados chamada fila (queue)."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enqueue:"})," Adiciona um elemento ao final da fila."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dequeue:"})," Remove o elemento do in\xedcio da fila."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Este processo garante que os elementos sejam processados na ordem em que foram adicionados, mantendo a ordem FIFO."}),"\n",(0,r.jsx)(n.p,{children:"Aqui est\xe1 um exemplo simples em Python usando uma lista como uma fila b\xe1sica:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.pop(0)\n        else:\n            return None\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n# Exemplo de Uso:\nmy_queue = Queue()\nmy_queue.enqueue(1)\nmy_queue.enqueue(2)\nmy_queue.enqueue(3)\n\nprint(my_queue.dequeue())  # Sa\xedda: 1\nprint(my_queue.dequeue())  # Sa\xedda: 2\n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var s=o(6540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);