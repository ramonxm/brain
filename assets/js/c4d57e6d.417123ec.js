"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[3265],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>t});var i=r(6540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},8639:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"algorithms/sorting/quick-sort","title":"Quick Sort","description":"O Quick Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a estrat\xe9gia de dividir e conquistar. Ele escolhe um elemento como piv\xf4 e particiona o array ao redor do piv\xf4, colocando elementos menores \xe0 esquerda e maiores \xe0 direita.","source":"@site/docs/algorithms/sorting/quick-sort.md","sourceDirName":"algorithms/sorting","slug":"/algorithms/sorting/quick-sort","permalink":"/brain/docs/algorithms/sorting/quick-sort","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/sorting/quick-sort.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748953870000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"algorithmsSidebar","previous":{"title":"Merge Sort","permalink":"/brain/docs/algorithms/sorting/merge-sort"},"next":{"title":"Binary Search (Busca Bin\xe1ria)","permalink":"/brain/docs/algorithms/sorting/binary-search"}}');var o=r(4848),a=r(8453);const s={sidebar_position:4},t="Quick Sort",d={},l=[{value:"Complexidade",id:"complexidade",level:2},{value:"Implementa\xe7\xe3o",id:"implementa\xe7\xe3o",level:2},{value:"Exemplo de Uso",id:"exemplo-de-uso",level:2},{value:"Quando Usar",id:"quando-usar",level:2},{value:"Vantagens e Desvantagens",id:"vantagens-e-desvantagens",level:2},{value:"Vantagens",id:"vantagens",level:3},{value:"Desvantagens",id:"desvantagens",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-sort",children:"Quick Sort"})}),"\n",(0,o.jsx)(n.p,{children:"O Quick Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a estrat\xe9gia de dividir e conquistar. Ele escolhe um elemento como piv\xf4 e particiona o array ao redor do piv\xf4, colocando elementos menores \xe0 esquerda e maiores \xe0 direita."}),"\n",(0,o.jsx)(n.h2,{id:"complexidade",children:"Complexidade"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Tempo M\xe9dio: O(n log n)"}),"\n",(0,o.jsx)(n.li,{children:"Tempo Pior Caso: O(n\xb2)"}),"\n",(0,o.jsx)(n.li,{children:"Espa\xe7o: O(log n)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementa\xe7\xe3o",children:"Implementa\xe7\xe3o"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"function quickSort(arr: number[], low: number = 0, high: number = arr.length - 1): number[] {\n    if (low < high) {\n        const pivotIndex = partition(arr, low, high);\n        quickSort(arr, low, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, high);\n    }\n    return arr;\n}\n\nfunction partition(arr: number[], low: number, high: number): number {\n    const pivot = arr[high];\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n        if (arr[j] <= pivot) {\n            i++;\n            // Troca elementos\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n    }\n\n    // Coloca o piv\xf4 na posi\xe7\xe3o correta\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    return i + 1;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"exemplo-de-uso",children:"Exemplo de Uso"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"const array = [10, 7, 8, 9, 1, 5];\nconsole.log('Array original:', array);\n\nconst sortedArray = quickSort(array);\nconsole.log('Array ordenado:', sortedArray);\n// Sa\xedda: Array ordenado: [1, 5, 7, 8, 9, 10]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"quando-usar",children:"Quando Usar"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Quando voc\xea precisa de um algoritmo de ordena\xe7\xe3o eficiente in-place"}),"\n",(0,o.jsx)(n.li,{children:"Em grandes conjuntos de dados"}),"\n",(0,o.jsx)(n.li,{children:"Quando o espa\xe7o de mem\xf3ria \xe9 uma preocupa\xe7\xe3o"}),"\n",(0,o.jsx)(n.li,{children:"Quando voc\xea precisa de bom desempenho no caso m\xe9dio"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"vantagens-e-desvantagens",children:"Vantagens e Desvantagens"}),"\n",(0,o.jsx)(n.h3,{id:"vantagens",children:"Vantagens"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Eficiente na pr\xe1tica"}),"\n",(0,o.jsx)(n.li,{children:"Usa pouca mem\xf3ria (ordena\xe7\xe3o in-place)"}),"\n",(0,o.jsx)(n.li,{children:"Bom desempenho em cache devido \xe0 localidade de refer\xeancia"}),"\n",(0,o.jsx)(n.li,{children:"Pode ser facilmente modificado para diferentes tipos de dados"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"desvantagens",children:"Desvantagens"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"N\xe3o \xe9 est\xe1vel (pode alterar a ordem relativa de elementos iguais)"}),"\n",(0,o.jsx)(n.li,{children:"Desempenho O(n\xb2) no pior caso"}),"\n",(0,o.jsx)(n.li,{children:"A escolha do piv\xf4 pode afetar significativamente o desempenho"}),"\n",(0,o.jsx)(n.li,{children:"N\xe3o \xe9 adequado para arrays muito pequenos"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);