"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[5491],{4289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"data-structures/array","title":"\ud83d\udce6 Array","description":"Introduction","source":"@site/docs/data-structures/array.md","sourceDirName":"data-structures","slug":"/data-structures/array","permalink":"/brain/docs/data-structures/array","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/array.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749774019000,"frontMatter":{},"sidebar":"dataStructuresSidebar","next":{"title":"\ud83d\udcda Stack","permalink":"/brain/docs/data-structures/stack"}}');var s=t(4848),i=t(8453);const a={},l="\ud83d\udce6 Array",c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Key Properties",id:"key-properties",level:2},{value:"Common Operations",id:"common-operations",level:2},{value:"Example (Python)",id:"example-python",level:2},{value:"When to Use Arrays",id:"when-to-use-arrays",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Data Structures",id:"related-data-structures",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-array",children:"\ud83d\udce6 Array"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"array"})," is a data structure that stores a fixed-size sequence of elements of the same type in contiguous memory locations."]}),"\n",(0,s.jsx)(n.h2,{id:"key-properties",children:"Key Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexed"}),": Each element can be accessed directly by its index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fixed size"}),": The size is defined at creation and cannot be changed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Homogeneous"}),": All elements are of the same type"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access"}),": O(1) - Direct access by index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update"}),": O(1) - Direct update by index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search"}),": O(n) - Linear search for an element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Insert/Delete"}),": O(n) - May require shifting elements"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-python",children:"Example (Python)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Creating an array\narr = [10, 20, 30, 40, 50]\n\n# Accessing elements\nprint(arr[2])  # Output: 30\n\n# Updating elements\narr[1] = 25\nprint(arr)  # Output: [10, 25, 30, 40, 50]\n\n# Searching for an element\nif 40 in arr:\n    print("Found!")\n\n# Inserting an element (at the end)\narr.append(60)\n\n# Deleting an element (by value)\narr.remove(30)\nprint(arr)  # Output: [10, 25, 40, 50, 60]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-arrays",children:"When to Use Arrays"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you need fast, direct access to elements by index"}),"\n",(0,s.jsx)(n.li,{children:"When the number of elements is known and fixed"}),"\n",(0,s.jsx)(n.li,{children:"For implementing other data structures (stacks, queues, etc.)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fixed size (in most languages)"}),"\n",(0,s.jsx)(n.li,{children:"Insertion and deletion can be costly (O(n))"}),"\n",(0,s.jsx)(n.li,{children:"All elements must be of the same type"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-data-structures",children:"Related Data Structures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Array (List in Python, Vector in C++)"}),": Resizable version of an array"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linked List"}),": Allows efficient insertions/deletions but slower access"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);