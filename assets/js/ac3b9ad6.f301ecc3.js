"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[3696],{6943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"algorithms/sorting/selection-sort","title":"\ud83d\udd04 Selection Sort","description":"Introduction","source":"@site/docs/algorithms/sorting/selection-sort.md","sourceDirName":"algorithms/sorting","slug":"/algorithms/sorting/selection-sort","permalink":"/brain/docs/algorithms/sorting/selection-sort","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/sorting/selection-sort.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748951110000,"frontMatter":{}}');var s=t(4848),r=t(8453);const l={},a="\ud83d\udd04 Selection Sort",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Complexity",id:"complexity",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Advantages and Disadvantages",id:"advantages-and-disadvantages",level:2},{value:"\u2705 Advantages",id:"-advantages",level:3},{value:"\u274c Disadvantages",id:"-disadvantages",level:3},{value:"When to Use Selection Sort",id:"when-to-use-selection-sort",level:2},{value:"Related Algorithms",id:"related-algorithms",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-selection-sort",children:"\ud83d\udd04 Selection Sort"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Selection Sort"})," is a simple comparison-based sorting algorithm. It repeatedly selects the smallest (or largest) element from the unsorted part and moves it to the beginning (or end) of the list."]}),"\n",(0,s.jsx)(n.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time"}),": O(n\xb2) in the worst and average case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Space"}),": O(1) (in-place)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Find the minimum element in the unsorted part"}),"\n",(0,s.jsx)(n.li,{children:"Swap it with the first unsorted element"}),"\n",(0,s.jsx)(n.li,{children:"Move the boundary of the sorted part one step forward"}),"\n",(0,s.jsx)(n.li,{children:"Repeat until the list is sorted"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i + 1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"arr = [64, 25, 12, 22, 11]\nselection_sort(arr)\nprint(arr)  # Output: [11, 12, 22, 25, 64]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advantages-and-disadvantages",children:"Advantages and Disadvantages"}),"\n",(0,s.jsx)(n.h3,{id:"-advantages",children:"\u2705 Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simple to understand and implement"}),"\n",(0,s.jsx)(n.li,{children:"Does not require extra memory (in-place)"}),"\n",(0,s.jsx)(n.li,{children:"Performs well on small lists"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-disadvantages",children:"\u274c Disadvantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Very slow for large lists (O(n\xb2))"}),"\n",(0,s.jsx)(n.li,{children:"Not stable by default (can be made stable with modifications)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-selection-sort",children:"When to Use Selection Sort"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For educational purposes and learning sorting concepts"}),"\n",(0,s.jsx)(n.li,{children:"When working with very small datasets"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-algorithms",children:"Related Algorithms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bubble Sort"}),": Swaps adjacent elements to sort"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Insertion Sort"}),": Builds the sorted array one item at a time"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);