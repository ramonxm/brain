"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[2783],{6210:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"algorithms/search/binary-search","title":"\ud83d\udd0d Binary Search","description":"Introduction","source":"@site/docs/algorithms/search/binary-search.md","sourceDirName":"algorithms/search","slug":"/algorithms/search/binary-search","permalink":"/brain/docs/algorithms/search/binary-search","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/search/binary-search.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748951110000,"frontMatter":{}}');var t=n(4848),a=n(8453);const s={},l="\ud83d\udd0d Binary Search",d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Complexity",id:"complexity",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Iterative Version",id:"iterative-version",level:3},{value:"Recursive Version",id:"recursive-version",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Advantages and Disadvantages",id:"advantages-and-disadvantages",level:2},{value:"\u2705 Advantages",id:"-advantages",level:3},{value:"\u274c Disadvantages",id:"-disadvantages",level:3}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"-binary-search",children:"\ud83d\udd0d Binary Search"})}),"\n",(0,t.jsx)(r.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Binary Search"})," is an efficient search algorithm that works by repeatedly dividing a sorted array in half to find a specific element."]}),"\n",(0,t.jsx)(r.h2,{id:"complexity",children:"Complexity"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Time"}),": O(log n)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Space"}),": O(1) iterative, O(log n) recursive"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"Compare the middle element of the array to the target"}),"\n",(0,t.jsx)(r.li,{children:"If equal, the element is found"}),"\n",(0,t.jsx)(r.li,{children:"If the target is less, search the left half"}),"\n",(0,t.jsx)(r.li,{children:"If the target is greater, search the right half"}),"\n",(0,t.jsx)(r.li,{children:"Repeat until found or the search space is empty"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(r.h3,{id:"iterative-version",children:"Iterative Version"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # Element not found\n"})}),"\n",(0,t.jsx)(r.h3,{id:"recursive-version",children:"Recursive Version"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def binary_search_recursive(arr, target, left=0, right=None):\n    if right is None:\n        right = len(arr) - 1\n    if left > right:\n        return -1\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, right)\n    else:\n        return binary_search_recursive(arr, target, left, mid - 1)\n"})}),"\n",(0,t.jsx)(r.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Sorted array\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\n\n# Search\nindex = binary_search(arr, target)\nprint(f"Element {target} found at index: {index}")  # Output: 3\n'})}),"\n",(0,t.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(r.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(r.strong,{children:"Important"}),": The array must be ",(0,t.jsx)(r.strong,{children:"sorted"})," for binary search to work correctly."]}),"\n",(0,t.jsx)(r.h2,{id:"advantages-and-disadvantages",children:"Advantages and Disadvantages"}),"\n",(0,t.jsx)(r.h3,{id:"-advantages",children:"\u2705 Advantages"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Very efficient for large arrays"}),"\n",(0,t.jsx)(r.li,{children:"O(log n) time complexity"}),"\n",(0,t.jsx)(r.li,{children:"Minimal memory usage in the iterative version"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"-disadvantages",children:"\u274c Disadvantages"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Requires a sorted array"}),"\n",(0,t.jsx)(r.li,{children:"Not efficient for linked lists"}),"\n",(0,t.jsx)(r.li,{children:"O(log n) space complexity in the recursive version"}),"\n"]})]})}function o(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var i=n(6540);const t={},a=i.createContext(t);function s(e){const r=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);