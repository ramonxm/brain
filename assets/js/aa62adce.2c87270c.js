"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[3770],{1163:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"data-structures/binary-tree","title":"\ud83c\udf33 Binary Tree","description":"Introduction","source":"@site/docs/data-structures/binary-tree.md","sourceDirName":"data-structures","slug":"/data-structures/binary-tree","permalink":"/brain/docs/data-structures/binary-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/binary-tree.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749774019000,"frontMatter":{},"sidebar":"dataStructuresSidebar","previous":{"title":"\ud83d\udcda Queue","permalink":"/brain/docs/data-structures/queue"},"next":{"title":"\ud83d\udd17 Linked List","permalink":"/brain/docs/data-structures/linked-list"}}');var i=r(4848),s=r(8453);const a={},l="\ud83c\udf33 Binary Tree",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Key Properties",id:"key-properties",level:2},{value:"Types of Binary Trees",id:"types-of-binary-trees",level:2},{value:"Example (Python)",id:"example-python",level:2},{value:"Applications",id:"applications",level:2},{value:"When to Use a Binary Tree",id:"when-to-use-a-binary-tree",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Data Structures",id:"related-data-structures",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-binary-tree",children:"\ud83c\udf33 Binary Tree"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"binary tree"})," is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child."]}),"\n",(0,i.jsx)(n.h2,{id:"key-properties",children:"Key Properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Root"}),": The top node of the tree"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Leaf"}),": A node with no children"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Height"}),": The length of the longest path from the root to a leaf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Depth"}),": The length of the path from the root to a node"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-binary-trees",children:"Types of Binary Trees"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full Binary Tree"}),": Every node has 0 or 2 children"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complete Binary Tree"}),": All levels are filled except possibly the last, which is filled from left to right"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Perfect Binary Tree"}),": All internal nodes have two children and all leaves are at the same level"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Balanced Binary Tree"}),": The height of the tree is minimized"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Search Tree (BST)"}),": Left child < parent < right child"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-python",children:"Example (Python)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.data, end=" ")\n        inorder_traversal(root.right)\n\n# Usage\nroot = Node(10)\nroot.left = Node(5)\nroot.right = Node(15)\nroot.left.left = Node(2)\nroot.left.right = Node(7)\n\ninorder_traversal(root)  # Output: 2 5 7 10 15\n'})}),"\n",(0,i.jsx)(n.h2,{id:"applications",children:"Applications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Hierarchical data representation (file systems, organization charts)"}),"\n",(0,i.jsx)(n.li,{children:"Expression parsing and evaluation"}),"\n",(0,i.jsx)(n.li,{children:"Binary search trees for fast lookup, insertion, and deletion"}),"\n",(0,i.jsx)(n.li,{children:"Heaps for priority queues"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-a-binary-tree",children:"When to Use a Binary Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When you need to represent hierarchical relationships"}),"\n",(0,i.jsx)(n.li,{children:"When you need efficient searching, insertion, and deletion (BST)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can become unbalanced, leading to poor performance (O(n) operations)"}),"\n",(0,i.jsx)(n.li,{children:"More complex to implement than arrays or linked lists"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-data-structures",children:"Related Data Structures"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Search Tree (BST)"}),": Maintains sorted order"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AVL Tree, Red-Black Tree"}),": Self-balancing binary search trees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Heap"}),": Complete binary tree used for priority queues"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);