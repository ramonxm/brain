"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[2721],{6169:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"concepts/index","title":"\ud83d\udca1 Fundamental Concepts","description":"Welcome to the fundamental concepts section! Here you\'ll learn about the core principles that underlie computer science and programming.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/concepts/index.md","sourceDirName":"concepts","slug":"/concepts/","permalink":"/brain/en/docs/concepts/","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/index.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748914532000,"frontMatter":{},"sidebar":"conceptsSidebar","next":{"title":"\ud83d\udcda Complete Guide to Big O Notation","permalink":"/brain/en/docs/concepts/big-o-notation"}}');var s=t(4848),i=t(8453);const c={},o="\ud83d\udca1 Fundamental Concepts",a={},l=[{value:"What You&#39;ll Learn",id:"what-youll-learn",level:2},{value:"\ud83c\udfaf Core Fundamentals",id:"-core-fundamentals",level:3},{value:"\ud83d\udd04 Programming Mechanisms",id:"-programming-mechanisms",level:3},{value:"\u26a1 Concurrency &amp; Parallelism",id:"-concurrency--parallelism",level:3},{value:"\ud83c\udfd7\ufe0f System Architecture",id:"\ufe0f-system-architecture",level:3},{value:"Getting Started",id:"getting-started",level:2}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-fundamental-concepts",children:"\ud83d\udca1 Fundamental Concepts"})}),"\n",(0,s.jsx)(n.p,{children:"Welcome to the fundamental concepts section! Here you'll learn about the core principles that underlie computer science and programming."}),"\n",(0,s.jsx)(n.h2,{id:"what-youll-learn",children:"What You'll Learn"}),"\n",(0,s.jsx)(n.p,{children:"This section covers the essential concepts that every programmer and computer scientist should understand:"}),"\n",(0,s.jsx)(n.h3,{id:"-core-fundamentals",children:"\ud83c\udfaf Core Fundamentals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Big O Notation"}),": Understanding algorithm complexity and performance analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": How computers handle memory allocation (Stack vs Heap)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time and Space Complexity"}),": Analyzing the efficiency of algorithms"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-programming-mechanisms",children:"\ud83d\udd04 Programming Mechanisms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FIFO (First In, First Out)"}),": Understanding queue-like behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LIFO (Last In, First Out)"}),": Understanding stack-like behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Swap Operations"}),": Fundamental data manipulation techniques"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-concurrency--parallelism",children:"\u26a1 Concurrency & Parallelism"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Threads"}),": Understanding concurrent execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Processes"}),": System-level program execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Synchronization"}),": Coordinating concurrent operations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-system-architecture",children:"\ud83c\udfd7\ufe0f System Architecture"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Computer Architecture"}),": How computers are built and operate"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": Advanced memory handling concepts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Operating Systems"}),": How systems manage resources"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.p,{children:["Start with ",(0,s.jsx)(n.strong,{children:"Big O Notation"})," to understand how we measure algorithm efficiency, then explore memory concepts to understand how computers store and retrieve data."]}),"\n",(0,s.jsx)(n.p,{children:"Each concept builds upon the previous ones, so we recommend following the suggested order for the best learning experience."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);