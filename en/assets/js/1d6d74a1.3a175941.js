"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[3537],{6802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"data-structures/linked-list","title":"\ud83d\udd17 Linked List","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/data-structures/linked-list.md","sourceDirName":"data-structures","slug":"/data-structures/linked-list","permalink":"/brain/en/docs/data-structures/linked-list","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/linked-list.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749930209000,"frontMatter":{},"sidebar":"dataStructuresSidebar","previous":{"title":"\ud83c\udf33 Binary Tree","permalink":"/brain/en/docs/data-structures/binary-tree"}}');var s=t(4848),r=t(8453);const l={},a="\ud83d\udd17 Linked List",d={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Types",id:"types",level:2},{value:"Key Operations",id:"key-operations",level:2},{value:"Example (Python - Singly Linked List)",id:"example-python---singly-linked-list",level:2},{value:"Applications",id:"applications",level:2},{value:"When to Use a Linked List",id:"when-to-use-a-linked-list",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Data Structures",id:"related-data-structures",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-linked-list",children:"\ud83d\udd17 Linked List"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"linked list"})," is a linear data structure where each element (node) contains a value and a reference (pointer) to the next node in the sequence."]}),"\n",(0,s.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Singly Linked List"}),": Each node points to the next node"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Doubly Linked List"}),": Each node points to both the next and previous nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circular Linked List"}),": The last node points back to the first node"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Insert"}),": Add a new node (O(1) at head, O(n) at tail or arbitrary position)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Delete"}),": Remove a node (O(1) if node is known, O(n) to search)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search"}),": Find a node with a given value (O(n))"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Traversal"}),": Visit all nodes in sequence (O(n))"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-python---singly-linked-list",children:"Example (Python - Singly Linked List)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def print_list(self):\n        curr = self.head\n        while curr:\n            print(curr.data, end=" ")\n            curr = curr.next\n        print()\n\n# Usage\nll = LinkedList()\nll.append(10)\nll.append(20)\nll.append(30)\nll.print_list()  # Output: 10 20 30\n'})}),"\n",(0,s.jsx)(n.h2,{id:"applications",children:"Applications"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implementing stacks, queues, and other abstract data types"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic memory allocation"}),"\n",(0,s.jsx)(n.li,{children:"Undo functionality in applications"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-a-linked-list",children:"When to Use a Linked List"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you need efficient insertions/deletions at arbitrary positions"}),"\n",(0,s.jsx)(n.li,{children:"When the size of the data structure changes frequently"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No direct access by index (must traverse from the head)"}),"\n",(0,s.jsx)(n.li,{children:"Extra memory for pointers"}),"\n",(0,s.jsx)(n.li,{children:"Slower search compared to arrays"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-data-structures",children:"Related Data Structures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Array"}),": Direct access by index, fixed size"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Doubly Linked List"}),": Allows traversal in both directions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);