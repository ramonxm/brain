"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[5720],{2659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"concepts/big-o-notation","title":"\ud83d\udcda Complete Guide to Big O Notation","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/concepts/big-o-notation.md","sourceDirName":"concepts","slug":"/concepts/big-o-notation","permalink":"/brain/en/docs/concepts/big-o-notation","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/big-o-notation.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748917956000,"frontMatter":{},"sidebar":"conceptsSidebar","previous":{"title":"\ud83d\udca1 Fundamental Concepts","permalink":"/brain/en/docs/concepts/"},"next":{"title":"FIFO (First In, First Out)","permalink":"/brain/en/docs/concepts/fifo"}}');var l=t(4848),s=t(8453);const r={},o="\ud83d\udcda Complete Guide to Big O Notation",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"O(1) \u2013 Constant Complexity",id:"o1--constant-complexity",level:2},{value:"O(log n) \u2013 Logarithmic Complexity",id:"olog-n--logarithmic-complexity",level:2},{value:"O(n) \u2013 Linear Complexity",id:"on--linear-complexity",level:2},{value:"O(n log n) \u2013 Quasilinear Complexity",id:"on-log-n--quasilinear-complexity",level:2},{value:"O(n\xb2) \u2013 Quadratic Complexity",id:"on--quadratic-complexity",level:2},{value:"O(2\u207f) \u2013 Exponential Complexity",id:"o2\u207f--exponential-complexity",level:2},{value:"O(n!) \u2013 Factorial Complexity",id:"on--factorial-complexity",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"-complete-guide-to-big-o-notation",children:"\ud83d\udcda Complete Guide to Big O Notation"})}),"\n",(0,l.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Big O"})," is a way to measure algorithm efficiency in terms of ",(0,l.jsx)(n.strong,{children:"time"})," (speed) or ",(0,l.jsx)(n.strong,{children:"space"})," (memory) ",(0,l.jsx)(n.strong,{children:"as the input grows"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["Big O does ",(0,l.jsx)(n.strong,{children:"not"})," measure actual execution time \u2014 it measures ",(0,l.jsx)(n.strong,{children:"how time/memory grows"})," depending on input size."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h1,{id:"-main-big-o-complexities",children:"\ud83e\udde0 Main Big O Complexities"}),"\n",(0,l.jsx)(n.h2,{id:"o1--constant-complexity",children:"O(1) \u2013 Constant Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"You turn on a light by flipping the switch."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Execution time doesn't depend on input size."}),"\n",(0,l.jsx)(n.li,{children:"\u2705 Always performs the same number of steps."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"olog-n--logarithmic-complexity",children:"O(log n) \u2013 Logarithmic Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Finding a name in the phone book by splitting the book in half each time."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Each operation reduces the problem by half."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Classic example: ",(0,l.jsx)(n.strong,{children:"Binary Search"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"on--linear-complexity",children:"O(n) \u2013 Linear Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Looking at each card in a deck to find the Ace of Spades."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Execution time grows proportionally to input size."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Example: ",(0,l.jsx)(n.strong,{children:"Iterating through a list"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"on-log-n--quasilinear-complexity",children:"O(n log n) \u2013 Quasilinear Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Divide to conquer and then combine."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Better than O(n\xb2) but worse than O(n)."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Used in efficient sorting algorithms like ",(0,l.jsx)(n.strong,{children:"Merge Sort"})," and ",(0,l.jsx)(n.strong,{children:"Quick Sort"})," (on average)."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"on--quadratic-complexity",children:"O(n\xb2) \u2013 Quadratic Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Comparing each student with every other student in a classroom."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Each element is compared with every other element."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Examples: ",(0,l.jsx)(n.strong,{children:"Bubble Sort"}),", ",(0,l.jsx)(n.strong,{children:"Selection Sort"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"o2\u207f--exponential-complexity",children:"O(2\u207f) \u2013 Exponential Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Testing all possible combinations to solve a magic cube."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Number of operations doubles with each added element."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Examples:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Subsets"}),": generating all subsets of a list."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Knapsack Problem"})," (brute-force)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"on--factorial-complexity",children:"O(n!) \u2013 Factorial Complexity"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:'"Arranging all possible orders for party guests."'}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 Tries all possible permutations."}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 Examples:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Traveling Salesman Problem"})," (brute-force)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Generating all permutations"})," of a list."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h1,{id:"-complexity-summary-table",children:"\ud83d\udccb Complexity Summary Table"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Complexity"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Growth"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Practical Example"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(1)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Constant"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Fixed, doesn't change with n"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Access array item by index"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(log n)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Logarithmic"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Grows slowly"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Binary Search"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(n)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Linear"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Grows proportionally to n"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Iterate through array"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(n log n)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Quasilinear"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Between linear and quadratic"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Merge Sort, Quick Sort"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(n\xb2)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Quadratic"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Grows quickly"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Bubble Sort, Selection Sort"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(2\u207f)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Exponential"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Grows absurdly fast"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Subsets, combination problems"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"O(n!)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Factorial"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Explosive growth"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Permutations, Traveling Salesman"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h1,{id:"-visual-growth-chart-of-complexities",children:"\ud83d\udcc8 Visual Growth Chart of Complexities"}),"\n",(0,l.jsx)(n.p,{children:"Growth according to input size n:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-md",children:"|\n|                                         O(n!)\n|                                     O(2^n)\n|                                 O(n\xb2)\n|                             O(n log n)\n|                          O(n)\n|                       O(log n)\n|__________O(1)____________________________________> n\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"O(1) remains constant."}),"\n",(0,l.jsx)(n.li,{children:"O(log n) grows very slowly."}),"\n",(0,l.jsx)(n.li,{children:"O(n) grows proportionally."}),"\n",(0,l.jsx)(n.li,{children:"O(n log n) grows a bit faster."}),"\n",(0,l.jsx)(n.li,{children:"O(n\xb2) grows very quickly."}),"\n",(0,l.jsx)(n.li,{children:"O(2\u207f) and O(n!) grow absurdly and quickly become impractical."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h1,{id:"-tips-to-memorize-big-o",children:"\u2728 Tips to Memorize Big O"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\ud83d\udd35 ",(0,l.jsx)(n.strong,{children:"Constant (O(1))"}),' \u2192 "Direct access"']}),"\n",(0,l.jsxs)(n.li,{children:["\ud83d\udfe2 ",(0,l.jsx)(n.strong,{children:"Logarithmic (O(log n))"}),' \u2192 "Dividing by half"']}),"\n",(0,l.jsxs)(n.li,{children:["\ud83d\udfe1 ",(0,l.jsx)(n.strong,{children:"Linear (O(n))"}),' \u2192 "Proportional"']}),"\n",(0,l.jsxs)(n.li,{children:["\ud83d\udfe0 ",(0,l.jsx)(n.strong,{children:"Quasilinear (O(n log n))"}),' \u2192 "Divide and conquer"']}),"\n",(0,l.jsxs)(n.li,{children:["\ud83d\udd34 ",(0,l.jsx)(n.strong,{children:"Quadratic (O(n\xb2))"}),' \u2192 "Double comparisons"']}),"\n",(0,l.jsxs)(n.li,{children:["\ud83d\udfe3 ",(0,l.jsx)(n.strong,{children:"Exponential (O(2\u207f))"}),' \u2192 "Doubling combinations"']}),"\n",(0,l.jsxs)(n.li,{children:["\u26ab ",(0,l.jsx)(n.strong,{children:"Factorial (O(n!))"}),' \u2192 "All possible orders"']}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const l={},s=i.createContext(l);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);