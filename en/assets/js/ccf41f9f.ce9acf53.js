"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[8639],{6150:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"concepts/memory-stack-heap","title":"\ud83e\udde0 Mem\xf3ria Heap e Stack","description":"Quando um programa \xe9 executado, a mem\xf3ria \xe9 alocada para armazenar vari\xe1veis e dados tempor\xe1rios. Duas \xe1reas principais de mem\xf3ria s\xe3o comumente utilizadas: heap e stack.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/concepts/memory-stack-heap.md","sourceDirName":"concepts","slug":"/concepts/memory-stack-heap","permalink":"/brain/en/docs/concepts/memory-stack-heap","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/memory-stack-heap.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1750117941000,"frontMatter":{},"sidebar":"conceptsSidebar","previous":{"title":"\ud83e\uddf5 Threads","permalink":"/brain/en/docs/concepts/thread"},"next":{"title":"\ud83d\udd04 Swap","permalink":"/brain/en/docs/concepts/swap"}}');var s=r(4848),n=r(8453);const i={},t="\ud83e\udde0 Mem\xf3ria Heap e Stack",c={},m=[{value:"Mem\xf3ria Stack",id:"mem\xf3ria-stack",level:2},{value:"Mem\xf3ria Heap",id:"mem\xf3ria-heap",level:2},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function d(e){const a={h1:"h1",h2:"h2",header:"header",p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"-mem\xf3ria-heap-e-stack",children:"\ud83e\udde0 Mem\xf3ria Heap e Stack"})}),"\n",(0,s.jsx)(a.p,{children:"Quando um programa \xe9 executado, a mem\xf3ria \xe9 alocada para armazenar vari\xe1veis e dados tempor\xe1rios. Duas \xe1reas principais de mem\xf3ria s\xe3o comumente utilizadas: heap e stack."}),"\n",(0,s.jsx)(a.h2,{id:"mem\xf3ria-stack",children:"Mem\xf3ria Stack"}),"\n",(0,s.jsx)(a.p,{children:"A mem\xf3ria stack \xe9 uma regi\xe3o que armazena vari\xe1veis locais e informa\xe7\xf5es relacionadas \xe0s fun\xe7\xf5es que est\xe3o sendo executadas no momento. Cada fun\xe7\xe3o tem seu pr\xf3prio frame de stack, contendo par\xe2metros, endere\xe7o de retorno e vari\xe1veis locais. A aloca\xe7\xe3o e desaloca\xe7\xe3o de mem\xf3ria na stack s\xe3o feitas automaticamente conforme as fun\xe7\xf5es s\xe3o chamadas e retornadas."}),"\n",(0,s.jsx)(a.p,{children:"As opera\xe7\xf5es na stack seguem o modelo Last In, First Out (LIFO), onde o \xfaltimo item adicionado \xe9 o primeiro a ser removido. Isso torna a stack eficiente para gerenciar a execu\xe7\xe3o de fun\xe7\xf5es, mas vem com uma capacidade limitada."}),"\n",(0,s.jsx)(a.h2,{id:"mem\xf3ria-heap",children:"Mem\xf3ria Heap"}),"\n",(0,s.jsx)(a.p,{children:"A mem\xf3ria heap \xe9 uma \xe1rea de mem\xf3ria din\xe2mica usada para alocar mem\xf3ria durante a execu\xe7\xe3o do programa. A aloca\xe7\xe3o e desaloca\xe7\xe3o de mem\xf3ria no heap s\xe3o controladas explicitamente pelo programador. Isso permite a cria\xe7\xe3o de estruturas de dados flex\xedveis e gerenciamento eficiente de mem\xf3ria conforme necess\xe1rio."}),"\n",(0,s.jsx)(a.p,{children:"Diferente da stack, o heap n\xe3o possui uma estrutura organizacional espec\xedfica, e a aloca\xe7\xe3o de mem\xf3ria pode ocorrer de forma espor\xe1dica. \xc9 responsabilidade do programador liberar a mem\xf3ria heap alocada quando ela n\xe3o for mais necess\xe1ria, evitando vazamentos de mem\xf3ria."}),"\n",(0,s.jsx)(a.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,s.jsx)(a.p,{children:"Em resumo, a mem\xf3ria stack \xe9 usada para armazenar dados tempor\xe1rios e informa\xe7\xf5es relacionadas a fun\xe7\xf5es, com aloca\xe7\xe3o e desaloca\xe7\xe3o autom\xe1tica. Por outro lado, a mem\xf3ria heap permite aloca\xe7\xe3o din\xe2mica de mem\xf3ria, fornecendo mais controle ao programador, mas exigindo um gerenciamento respons\xe1vel de mem\xf3ria."}),"\n",(0,s.jsx)(a.p,{children:"Ambas as \xe1reas de mem\xf3ria desempenham pap\xe9is vitais na opera\xe7\xe3o do programa, e uma compreens\xe3o adequada delas \xe9 crucial para um desenvolvimento eficiente e livre de bugs."})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>t});var o=r(6540);const s={},n=o.createContext(s);function i(e){const a=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(n.Provider,{value:a},e.children)}}}]);