"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[535],{7285:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"algorithms/sorting/merge-sort","title":"Merge Sort","description":"O Merge Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a t\xe9cnica de dividir e conquistar. Ele divide o array em duas metades, ordena cada metade recursivamente e depois combina as duas metades ordenadas.","source":"@site/docs/algorithms/sorting/merge-sort.md","sourceDirName":"algorithms/sorting","slug":"/algorithms/sorting/merge-sort","permalink":"/brain/en/docs/algorithms/sorting/merge-sort","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/sorting/merge-sort.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749774019000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"algorithmsSidebar","previous":{"title":"\ud83d\udd04 Bubble Sort","permalink":"/brain/en/docs/algorithms/sorting/bubble-sort"},"next":{"title":"Quick Sort","permalink":"/brain/en/docs/algorithms/sorting/quick-sort"}}');var t=r(4848),i=r(8453);const s={sidebar_position:3},o="Merge Sort",d={},l=[{value:"Complexidade",id:"complexidade",level:2},{value:"Implementa\xe7\xe3o",id:"implementa\xe7\xe3o",level:2},{value:"Exemplo de Uso",id:"exemplo-de-uso",level:2},{value:"Quando Usar",id:"quando-usar",level:2},{value:"Vantagens e Desvantagens",id:"vantagens-e-desvantagens",level:2},{value:"Vantagens",id:"vantagens",level:3},{value:"Desvantagens",id:"desvantagens",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"merge-sort",children:"Merge Sort"})}),"\n",(0,t.jsx)(n.p,{children:"O Merge Sort \xe9 um algoritmo de ordena\xe7\xe3o eficiente que utiliza a t\xe9cnica de dividir e conquistar. Ele divide o array em duas metades, ordena cada metade recursivamente e depois combina as duas metades ordenadas."}),"\n",(0,t.jsx)(n.h2,{id:"complexidade",children:"Complexidade"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tempo: O(n log n)"}),"\n",(0,t.jsx)(n.li,{children:"Espa\xe7o: O(n)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementa\xe7\xe3o",children:"Implementa\xe7\xe3o"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function mergeSort(arr: number[]): number[] {\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left: number[], right: number[]): number[] {\n    const result: number[] = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n        if (left[leftIndex] < right[rightIndex]) {\n            result.push(left[leftIndex]);\n            leftIndex++;\n        } else {\n            result.push(right[rightIndex]);\n            rightIndex++;\n        }\n    }\n\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exemplo-de-uso",children:"Exemplo de Uso"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const array = [38, 27, 43, 3, 9, 82, 10];\nconsole.log('Array original:', array);\n\nconst sortedArray = mergeSort(array);\nconsole.log('Array ordenado:', sortedArray);\n// Sa\xedda: Array ordenado: [3, 9, 10, 27, 38, 43, 82]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"quando-usar",children:"Quando Usar"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Quando voc\xea precisa de um algoritmo de ordena\xe7\xe3o est\xe1vel"}),"\n",(0,t.jsx)(n.li,{children:"Quando a complexidade de tempo garantida O(n log n) \xe9 importante"}),"\n",(0,t.jsx)(n.li,{children:"Quando voc\xea tem mem\xf3ria suficiente dispon\xedvel"}),"\n",(0,t.jsx)(n.li,{children:"Em grandes conjuntos de dados onde a efici\xeancia \xe9 crucial"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"vantagens-e-desvantagens",children:"Vantagens e Desvantagens"}),"\n",(0,t.jsx)(n.h3,{id:"vantagens",children:"Vantagens"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tempo de execu\xe7\xe3o garantido O(n log n)"}),"\n",(0,t.jsx)(n.li,{children:"Est\xe1vel (mant\xe9m a ordem relativa de elementos iguais)"}),"\n",(0,t.jsx)(n.li,{children:"Bom para ordenar linked lists"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"desvantagens",children:"Desvantagens"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Requer espa\xe7o adicional O(n)"}),"\n",(0,t.jsx)(n.li,{children:"Para arrays pequenos, pode ser mais lento que algoritmos mais simples"}),"\n",(0,t.jsx)(n.li,{children:"Complexidade de implementa\xe7\xe3o maior que algoritmos b\xe1sicos"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);