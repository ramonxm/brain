"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[3550],{797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"algorithms/sorting/bubble-sort","title":"\ud83d\udd04 Bubble Sort","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/algorithms/sorting/bubble-sort.md","sourceDirName":"algorithms/sorting","slug":"/algorithms/sorting/bubble-sort","permalink":"/brain/en/docs/algorithms/sorting/bubble-sort","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/algorithms/sorting/bubble-sort.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1749475241000,"frontMatter":{},"sidebar":"algorithmsSidebar","next":{"title":"Merge Sort","permalink":"/brain/en/docs/algorithms/sorting/merge-sort"}}');var s=t(4848),i=t(8453);const a={},l="\ud83d\udd04 Bubble Sort",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Complexity",id:"complexity",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Advantages and Disadvantages",id:"advantages-and-disadvantages",level:2},{value:"\u2705 Advantages",id:"-advantages",level:3},{value:"\u274c Disadvantages",id:"-disadvantages",level:3},{value:"When to Use Bubble Sort",id:"when-to-use-bubble-sort",level:2},{value:"Related Algorithms",id:"related-algorithms",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-bubble-sort",children:"\ud83d\udd04 Bubble Sort"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bubble Sort"})," is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted."]}),"\n",(0,s.jsx)(n.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time"}),": O(n\xb2) in the worst and average case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Space"}),": O(1) (in-place)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Compare each pair of adjacent elements"}),"\n",(0,s.jsx)(n.li,{children:"Swap them if they are in the wrong order"}),"\n",(0,s.jsx)(n.li,{children:'After each pass, the largest unsorted element "bubbles up" to its correct position'}),"\n",(0,s.jsx)(n.li,{children:"Repeat until no swaps are needed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"arr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint(arr)  # Output: [11, 12, 22, 25, 34, 64, 90]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advantages-and-disadvantages",children:"Advantages and Disadvantages"}),"\n",(0,s.jsx)(n.h3,{id:"-advantages",children:"\u2705 Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simple to understand and implement"}),"\n",(0,s.jsx)(n.li,{children:"Does not require extra memory (in-place)"}),"\n",(0,s.jsx)(n.li,{children:"Can detect if the list is already sorted (optimized version)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-disadvantages",children:"\u274c Disadvantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Very slow for large lists (O(n\xb2))"}),"\n",(0,s.jsx)(n.li,{children:"Not suitable for large datasets"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-bubble-sort",children:"When to Use Bubble Sort"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For educational purposes and learning sorting concepts"}),"\n",(0,s.jsx)(n.li,{children:"When working with very small or nearly sorted datasets"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-algorithms",children:"Related Algorithms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selection Sort"}),": Selects the minimum element and places it at the beginning"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Insertion Sort"}),": Builds the sorted array one item at a time"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);