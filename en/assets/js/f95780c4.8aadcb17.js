"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[4117],{2060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"data-structures/stack/index","title":"\ud83d\udcda Stack","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/data-structures/stack/index.md","sourceDirName":"data-structures/stack","slug":"/data-structures/stack/","permalink":"/brain/en/docs/data-structures/stack/","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/stack/index.md","tags":[],"version":"current","lastUpdatedBy":"Ramon Xavier","lastUpdatedAt":1748952641000,"frontMatter":{},"sidebar":"dataStructuresSidebar","previous":{"title":"\ud83d\udce6 Array","permalink":"/brain/en/docs/data-structures/array"},"next":{"title":"\ud83d\udcda Queue","permalink":"/brain/en/docs/data-structures/queue/"}}');var r=n(4848),i=n(8453);const a={},l="\ud83d\udcda Stack",c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Key Operations",id:"key-operations",level:2},{value:"Example (Python)",id:"example-python",level:2},{value:"Applications",id:"applications",level:2},{value:"When to Use a Stack",id:"when-to-use-a-stack",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Data Structures",id:"related-data-structures",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"-stack",children:"\ud83d\udcda Stack"})}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.strong,{children:"stack"})," is a linear data structure that follows the Last-In, First-Out (LIFO) principle. The last element added is the first one to be removed."]}),"\n",(0,r.jsx)(t.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Push"}),": Add an element to the top of the stack (O(1))"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pop"}),": Remove the top element from the stack (O(1))"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Peek/Top"}),": View the top element without removing it (O(1))"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"IsEmpty"}),": Check if the stack is empty"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example-python",children:"Example (Python)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'stack = []\n\n# Push elements\nstack.append(10)\nstack.append(20)\nstack.append(30)\n\n# Peek at the top\nprint(stack[-1])  # Output: 30\n\n# Pop elements\nprint(stack.pop())  # Output: 30\nprint(stack.pop())  # Output: 20\n\n# Check if empty\nif not stack:\n    print("Stack is empty!")\n'})}),"\n",(0,r.jsx)(t.h2,{id:"applications",children:"Applications"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Function call management (call stack)"}),"\n",(0,r.jsx)(t.li,{children:"Undo/redo features in editors"}),"\n",(0,r.jsx)(t.li,{children:"Expression evaluation (postfix, prefix)"}),"\n",(0,r.jsx)(t.li,{children:"Syntax parsing"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"when-to-use-a-stack",children:"When to Use a Stack"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"When you need to reverse data"}),"\n",(0,r.jsx)(t.li,{children:"When you need to track nested or recursive operations"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Only the top element is accessible"}),"\n",(0,r.jsx)(t.li,{children:"Not suitable for random access"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"related-data-structures",children:"Related Data Structures"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Queue"}),": Follows First-In, First-Out (FIFO)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Deque"}),": Double-ended queue, allows insertion/removal from both ends"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);